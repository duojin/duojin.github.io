<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安装zip的mysql]]></title>
    <url>%2F2020%2F01%2F02%2F%E5%AE%89%E8%A3%85zip%E7%9A%84mysql%2F</url>
    <content type="text"><![CDATA[安装zip的mysql环境介绍win10、mysql5.7 官网 https://dev.mysql.com/doc/refman/5.7/en/windows-install-archive.html 下载mysql安装包zip1、下载地址 ​ https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.28-winx64.zip 2、解压到指定目录D:\dev-tool\mysql-5.7.28-winx64 3、创建配置文件my.ini ​ 在安装目录下创建配置文件my.ini、内容如下 12345678910111213141516[mysql]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]#设置3306端口port = 3306# 设置mysql的安装目录basedir=D:/dev-tool/mysql-5.7.28-winx64# 设置mysql数据库的数据的存放目录datadir=D:/dev-tool/mysql-5.7.28-winx64/data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB 更详细的请查阅官方文档 https://dev.mysql.com/doc/refman/5.7/en/windows-create-option-file.html 4、初始化并安装mysql cd到安装目录bin下 123mysqld --initializemysqld installnet start mysql 若之前弄错了 1mysqld -remove 5、MySQL5.7在安装完后会在data目录下生产一个随机的密码，文件名为xxx.err，登录时需要用随机密码登录，然后通过以下命令修改密码 1SET PASSWORD = PASSWORD(&apos;new password&apos;);]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[on windows os port proxy setting]]></title>
    <url>%2F2019%2F12%2F30%2Fon-windows-os-port-proxy-setting%2F</url>
    <content type="text"><![CDATA[on windows os port proxy setting在windows上做系统开发时，有时会有端口转发的需求 简洁配置如下 添加端口映射 1netsh interface portproxy add v4tov4 listenaddress=192.168.xxx.xxx listenport=6379 connectaddress=192.168.yyy.yyy connectport=6379 会把本机ip192.168.xxx.xxx，端口6379的数据请求转发到远程ip 192.168.yyy.yyy ，端口6379 上 删除端口映射 1netsh interface portproxy delete v4tov4 listenaddress=192.168.xxx.xxx listenport=6379 查看端口映射 1netsh interface portproxy show all 查看更多帮助 12netsh helpnetsh interface portproxy help]]></content>
  </entry>
  <entry>
    <title><![CDATA[发布jar到中央仓库]]></title>
    <url>%2F2019%2F12%2F19%2F%E5%8F%91%E5%B8%83jar%E5%88%B0%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[maven发布jar到中央仓库一、注册JIRA帐号​ 地址：https://issues.sonatype.org/secure/Dashboard.jspa ​ 注意：密码需要至少8位，同时有大小写字母，特殊字符和数字 二、创建issue 三、等待审核 域名问题，需要groupId的域名部分属于自己的域名，在这里使用com.github.duojin 根据一系列对话的指引解决所有问题，地址https://issues.sonatype.org/browse/OSSRH-53957 四、gpg 环境安装gpg的主要作用是生成密钥对，会用于后续我们组件发布的校验。1、下载地址： https://www.gnupg.org/download/, 安装时会附带安装UI程序kleopatra 2、在安装完成后，运行kleopatra程序，新建密钥对 3、导出证书 发布证书 五、maven 全局配置默认的maven配置文件为用户目录下的 .m2/setting.xml或自己配置后的目录文件 添加服务器验证 12345678910&lt;server&gt; &lt;id&gt;sonatype_releases&lt;/id&gt; &lt;username&gt;your user name&lt;/username&gt; &lt;password&gt;your password&lt;/password&gt;&lt;/server&gt;&lt;server&gt; &lt;id&gt;sonatype_snapshots&lt;/id&gt; &lt;username&gt;your user name&lt;/username&gt; &lt;password&gt;your password&lt;/password&gt;&lt;/server&gt; 用户名和密码是第一步中注册的JIRA的 配置gpg验证命令 1234567891011121314&lt;settings&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;gpg&lt;/id&gt; &lt;properties&gt; &lt;gpg.executable&gt;gpg&lt;/gpg.executable&gt; &lt;gpg.passphrase&gt;your password&lt;/gpg.passphrase&gt; &lt;/properties&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;gpg&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; 六、项目中的maven配置 在项目的pom.xml文件中，配置相应的开源协议、仓库信息、开发人员信息和发布配置 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!-- 开源签名证书 --&gt;&lt;licenses&gt; &lt;license&gt; &lt;name&gt;The Apache Software License, Version 2.0&lt;/name&gt; &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0.txt&lt;/url&gt; &lt;distribution&gt;repo&lt;/distribution&gt; &lt;/license&gt;&lt;/licenses&gt;&lt;!-- 仓库信息 --&gt;&lt;scm&gt; &lt;connection&gt;scm:git@github.com:duojin/sms-spring-boot-project.git&lt;/connection&gt; &lt;developerConnection&gt;scm:git@github.com:duojin/sms-spring-boot-project.git &lt;/developerConnection&gt; &lt;url&gt;https://github.com/duojin/sms-spring-boot-project&lt;/url&gt;&lt;/scm&gt;&lt;!-- 开发人员信息 --&gt;&lt;developers&gt; &lt;developer&gt; &lt;name&gt;ajoe.Liu&lt;/name&gt; &lt;email&gt;87893689@qq.com&lt;/email&gt; &lt;organization&gt;https://github.com/duojin&lt;/organization&gt; &lt;timezone&gt;+8&lt;/timezone&gt; &lt;/developer&gt;&lt;/developers&gt;&lt;!-- 发布管理信息 --&gt;&lt;distributionManagement&gt; &lt;repository&gt; &lt;!-- 这里的id必须要和全局配置中的release id 一致 --&gt; &lt;id&gt;sonatype_releases&lt;/id&gt; &lt;name&gt;Nexus Release Repository&lt;/name&gt; &lt;!-- 这里就是在创建issue成功后，对方回复的release发布地址--&gt; &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;!-- 这里的id必须要和全局配置中的snapshot id 一致 --&gt; &lt;id&gt;sonatype_snapshots&lt;/id&gt; &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt; &lt;!-- 这里就是在创建issue成功后，对方回复的snapshot发布地址--&gt; &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt; &lt;/snapshotRepository&gt;&lt;/distributionManagement&gt; 发布到maven中央仓库会要求我们在上传jar到同时，必须同步发布对应到Javadoc、source、asc(利用gpg生成到校验)，所以需要在maven中添加以下构建插件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- --&gt; &lt;plugin&gt; &lt;groupId&gt;org.sonatype.plugins&lt;/groupId&gt; &lt;artifactId&gt;nexus-staging-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.6.7&lt;/version&gt; &lt;extensions&gt;true&lt;/extensions&gt; &lt;configuration&gt; &lt;!-- 这里的id必须要和全局配置中的release id 一致 --&gt; &lt;serverId&gt;sonatype_releases&lt;/serverId&gt; &lt;nexusUrl&gt;https://oss.sonatype.org/&lt;/nexusUrl&gt; &lt;!-- 如果希望发布后自动执行close和release操作，此处可以调整为true --&gt; &lt;autoReleaseAfterClose&gt;false&lt;/autoReleaseAfterClose&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- 生成java source.jar --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.2.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-sources&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;jar-no-fork&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt; &lt;version&gt;2.9.1&lt;/version&gt; &lt;configuration&gt; &lt;aggregate&gt;true&lt;/aggregate&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;docencoding&gt;UTF-8&lt;/docencoding&gt; &lt;!-- -Xdoclint:none maven忽视javadoc过程中警告和错误 --&gt; &lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-javadocs&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;jar&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;!-- 生成asc 校验文件 --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt; &lt;version&gt;1.5&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;!-- 必须和配置中的gpg校验id一致 --&gt; &lt;id&gt;gpg&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;sign&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 七、打包发布jar到中央仓库 执行以下命令进行发布（如果 pom.xml 中 autoReleaseAfterClose 的值为true，则脚本会自动完成在平台上close、release的操作，至此你将成功发布了，否则我们继续查看第3步） 测试打包 1mvn clean package 发布 1mvn clean release 八、验证 登录https://oss.sonatype.org/index.html#stagingRepositories 九、告知收尾回复评论、需要发布release版本、jar包才会同步到中央仓库]]></content>
  </entry>
</search>
